// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestProtocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TestProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TestProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TestProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TestProtocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TestProtocol_2eproto;
namespace TestProtocol {
class CS_LOGIN_REQ;
struct CS_LOGIN_REQDefaultTypeInternal;
extern CS_LOGIN_REQDefaultTypeInternal _CS_LOGIN_REQ_default_instance_;
class ECHO_SendChatMessage;
struct ECHO_SendChatMessageDefaultTypeInternal;
extern ECHO_SendChatMessageDefaultTypeInternal _ECHO_SendChatMessage_default_instance_;
class SC_LOING_RES;
struct SC_LOING_RESDefaultTypeInternal;
extern SC_LOING_RESDefaultTypeInternal _SC_LOING_RES_default_instance_;
}  // namespace TestProtocol
PROTOBUF_NAMESPACE_OPEN
template<> ::TestProtocol::CS_LOGIN_REQ* Arena::CreateMaybeMessage<::TestProtocol::CS_LOGIN_REQ>(Arena*);
template<> ::TestProtocol::ECHO_SendChatMessage* Arena::CreateMaybeMessage<::TestProtocol::ECHO_SendChatMessage>(Arena*);
template<> ::TestProtocol::SC_LOING_RES* Arena::CreateMaybeMessage<::TestProtocol::SC_LOING_RES>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TestProtocol {

// ===================================================================

class CS_LOGIN_REQ final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestProtocol.CS_LOGIN_REQ) */ {
 public:
  inline CS_LOGIN_REQ() : CS_LOGIN_REQ(nullptr) {}
  ~CS_LOGIN_REQ() override;
  explicit constexpr CS_LOGIN_REQ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CS_LOGIN_REQ(const CS_LOGIN_REQ& from);
  CS_LOGIN_REQ(CS_LOGIN_REQ&& from) noexcept
    : CS_LOGIN_REQ() {
    *this = ::std::move(from);
  }

  inline CS_LOGIN_REQ& operator=(const CS_LOGIN_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline CS_LOGIN_REQ& operator=(CS_LOGIN_REQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CS_LOGIN_REQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const CS_LOGIN_REQ* internal_default_instance() {
    return reinterpret_cast<const CS_LOGIN_REQ*>(
               &_CS_LOGIN_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CS_LOGIN_REQ& a, CS_LOGIN_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(CS_LOGIN_REQ* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CS_LOGIN_REQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CS_LOGIN_REQ* New() const final {
    return new CS_LOGIN_REQ();
  }

  CS_LOGIN_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CS_LOGIN_REQ>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CS_LOGIN_REQ& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CS_LOGIN_REQ& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CS_LOGIN_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestProtocol.CS_LOGIN_REQ";
  }
  protected:
  explicit CS_LOGIN_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketSizeFieldNumber = 1,
  };
  // uint32 packetSize = 1;
  void clear_packetsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 packetsize() const;
  void set_packetsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_packetsize() const;
  void _internal_set_packetsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TestProtocol.CS_LOGIN_REQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packetsize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TestProtocol_2eproto;
};
// -------------------------------------------------------------------

class SC_LOING_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestProtocol.SC_LOING_RES) */ {
 public:
  inline SC_LOING_RES() : SC_LOING_RES(nullptr) {}
  ~SC_LOING_RES() override;
  explicit constexpr SC_LOING_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SC_LOING_RES(const SC_LOING_RES& from);
  SC_LOING_RES(SC_LOING_RES&& from) noexcept
    : SC_LOING_RES() {
    *this = ::std::move(from);
  }

  inline SC_LOING_RES& operator=(const SC_LOING_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline SC_LOING_RES& operator=(SC_LOING_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SC_LOING_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const SC_LOING_RES* internal_default_instance() {
    return reinterpret_cast<const SC_LOING_RES*>(
               &_SC_LOING_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SC_LOING_RES& a, SC_LOING_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(SC_LOING_RES* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SC_LOING_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SC_LOING_RES* New() const final {
    return new SC_LOING_RES();
  }

  SC_LOING_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SC_LOING_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SC_LOING_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SC_LOING_RES& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SC_LOING_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestProtocol.SC_LOING_RES";
  }
  protected:
  explicit SC_LOING_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIndexFieldNumber = 1,
  };
  // uint64 sessionIndex = 1;
  void clear_sessionindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionindex() const;
  void set_sessionindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sessionindex() const;
  void _internal_set_sessionindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TestProtocol.SC_LOING_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TestProtocol_2eproto;
};
// -------------------------------------------------------------------

class ECHO_SendChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestProtocol.ECHO_SendChatMessage) */ {
 public:
  inline ECHO_SendChatMessage() : ECHO_SendChatMessage(nullptr) {}
  ~ECHO_SendChatMessage() override;
  explicit constexpr ECHO_SendChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ECHO_SendChatMessage(const ECHO_SendChatMessage& from);
  ECHO_SendChatMessage(ECHO_SendChatMessage&& from) noexcept
    : ECHO_SendChatMessage() {
    *this = ::std::move(from);
  }

  inline ECHO_SendChatMessage& operator=(const ECHO_SendChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ECHO_SendChatMessage& operator=(ECHO_SendChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ECHO_SendChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ECHO_SendChatMessage* internal_default_instance() {
    return reinterpret_cast<const ECHO_SendChatMessage*>(
               &_ECHO_SendChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ECHO_SendChatMessage& a, ECHO_SendChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ECHO_SendChatMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ECHO_SendChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ECHO_SendChatMessage* New() const final {
    return new ECHO_SendChatMessage();
  }

  ECHO_SendChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ECHO_SendChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ECHO_SendChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ECHO_SendChatMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ECHO_SendChatMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestProtocol.ECHO_SendChatMessage";
  }
  protected:
  explicit ECHO_SendChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIndexFieldNumber = 1,
  };
  // uint64 sessionIndex = 1;
  void clear_sessionindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionindex() const;
  void set_sessionindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sessionindex() const;
  void _internal_set_sessionindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TestProtocol.ECHO_SendChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sessionindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_TestProtocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CS_LOGIN_REQ

// uint32 packetSize = 1;
inline void CS_LOGIN_REQ::clear_packetsize() {
  packetsize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_LOGIN_REQ::_internal_packetsize() const {
  return packetsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CS_LOGIN_REQ::packetsize() const {
  // @@protoc_insertion_point(field_get:TestProtocol.CS_LOGIN_REQ.packetSize)
  return _internal_packetsize();
}
inline void CS_LOGIN_REQ::_internal_set_packetsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  packetsize_ = value;
}
inline void CS_LOGIN_REQ::set_packetsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_packetsize(value);
  // @@protoc_insertion_point(field_set:TestProtocol.CS_LOGIN_REQ.packetSize)
}

// -------------------------------------------------------------------

// SC_LOING_RES

// uint64 sessionIndex = 1;
inline void SC_LOING_RES::clear_sessionindex() {
  sessionindex_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_LOING_RES::_internal_sessionindex() const {
  return sessionindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SC_LOING_RES::sessionindex() const {
  // @@protoc_insertion_point(field_get:TestProtocol.SC_LOING_RES.sessionIndex)
  return _internal_sessionindex();
}
inline void SC_LOING_RES::_internal_set_sessionindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sessionindex_ = value;
}
inline void SC_LOING_RES::set_sessionindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sessionindex(value);
  // @@protoc_insertion_point(field_set:TestProtocol.SC_LOING_RES.sessionIndex)
}

// -------------------------------------------------------------------

// ECHO_SendChatMessage

// uint64 sessionIndex = 1;
inline void ECHO_SendChatMessage::clear_sessionindex() {
  sessionindex_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ECHO_SendChatMessage::_internal_sessionindex() const {
  return sessionindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ECHO_SendChatMessage::sessionindex() const {
  // @@protoc_insertion_point(field_get:TestProtocol.ECHO_SendChatMessage.sessionIndex)
  return _internal_sessionindex();
}
inline void ECHO_SendChatMessage::_internal_set_sessionindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sessionindex_ = value;
}
inline void ECHO_SendChatMessage::set_sessionindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sessionindex(value);
  // @@protoc_insertion_point(field_set:TestProtocol.ECHO_SendChatMessage.sessionIndex)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TestProtocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TestProtocol_2eproto
